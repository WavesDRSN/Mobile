package ru.drsn.waves.ui.chat

import android.annotation.SuppressLint
import android.content.Context
import android.content.Intent
import android.os.Bundle
import android.util.Log // –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
import android.view.MenuItem
import androidx.appcompat.app.AppCompatActivity
import androidx.recyclerview.widget.LinearLayoutManager
import dagger.hilt.android.AndroidEntryPoint
import org.webrtc.DataChannel
import org.webrtc.PeerConnection
import ru.drsn.waves.WavesApplication
import ru.drsn.waves.data.Message // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
import ru.drsn.waves.databinding.ActivityChatBinding
// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –∏ –º–µ–Ω–µ–¥–∂–µ—Ä WebRTC
import ru.drsn.waves.webrtc.contract.IWebRTCManager
import ru.drsn.waves.webrtc.contract.WebRTCListener
import timber.log.Timber
import java.util.Date
import java.util.UUID
import javax.inject.Inject

@AndroidEntryPoint
class ChatActivity : AppCompatActivity(), WebRTCListener {

    private lateinit var binding: ActivityChatBinding
    private lateinit var chatAdapter: ChatAdapter

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å IWebRTCManager
    @Inject lateinit var webRTCManager: IWebRTCManager

    private lateinit var currentUserId: String // ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    private lateinit var recipientUserId: String
    private lateinit var recipientName: String

    // –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    private val TAG = "ChatActivity"

    companion object {
        private const val EXTRA_RECIPIENT_ID = "recipient_id"
        private const val EXTRA_RECIPIENT_NAME = "recipient_name"
        private const val EXTRA_CURRENT_USER_ID = "current_user_id" // –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å ID

        fun newIntent(context: Context, recipientId: String, recipientName: String, currentUserId: String): Intent {
            return Intent(context, ChatActivity::class.java).apply {
                putExtra(EXTRA_RECIPIENT_ID, recipientId)
                putExtra(EXTRA_RECIPIENT_NAME, recipientName)
                putExtra(EXTRA_CURRENT_USER_ID, currentUserId) // –ü–µ—Ä–µ–¥–∞–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            }
        }
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = ActivityChatBinding.inflate(layoutInflater)
        setContentView(binding.root)

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Intent
        recipientUserId = intent.getStringExtra(EXTRA_RECIPIENT_ID) ?: run {
            Timber.tag(TAG).e("Recipient ID not provided in Intent!")
            finish() // –ó–∞–∫—Ä—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–∏—Ç–∏, –µ—Å–ª–∏ –Ω–µ—Ç ID —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
            return // –í—ã—Ö–æ–¥–∏–º –∏–∑ onCreate
        }
        recipientName = intent.getStringExtra(EXTRA_RECIPIENT_NAME) ?: "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫"
        currentUserId = intent.getStringExtra(EXTRA_CURRENT_USER_ID) ?: run {
            Timber.tag(TAG).e("Current User ID not provided in Intent! Using default.")
            "user123" // –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç, –Ω–æ –ª—É—á—à–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å —è–≤–Ω–æ
        }

        webRTCManager.getDataHandler(recipientUserId)?.changeListener(this)

        setupToolbar()
        setupRecyclerView()
        setupSendButton()
        loadInitialMessages() // –ü–æ–∫–∞ –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä—ã
    }

    override fun onStart() {
        super.onStart()
        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —ç—Ç—É Activity –∫–∞–∫ —Å–ª—É—à–∞—Ç–µ–ª—è —Å–æ–±—ã—Ç–∏–π WebRTC
        Timber.tag(TAG).d("Registering WebRTC listener for target: $recipientUserId")
        webRTCManager.listener = this
    }

    override fun onStop() {
        super.onStop()
        // –í–ê–ñ–ù–û: –£–±–∏—Ä–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏ –∏
        // –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–æ–≥–¥–∞ Activity –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞.
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–±–∏—Ä–∞–µ–º –∏–º–µ–Ω–Ω–æ —Å–µ–±—è (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –¥—Ä—É–≥–æ–π —Å–ª—É—à–∞—Ç–µ–ª—å –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)
        if (webRTCManager.listener === this) {
            Timber.tag(TAG).d("Unregistering WebRTC listener")
            webRTCManager.listener = null
        }
    }


    private fun setupToolbar() {
        setSupportActionBar(binding.toolbarChat)
        supportActionBar?.apply {
            title = recipientName
            // subtitle = "Offline" // –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            setDisplayHomeAsUpEnabled(true)
            setDisplayShowHomeEnabled(true)
        }
    }

    override fun onOptionsItemSelected(item: MenuItem): Boolean {
        if (item.itemId == android.R.id.home) {
            onBackPressedDispatcher.onBackPressed()
            return true
        }
        return super.onOptionsItemSelected(item)
    }


    private fun setupRecyclerView() {
        chatAdapter = ChatAdapter(currentUserId)
        binding.recyclerViewMessages.apply {
            adapter = chatAdapter
            layoutManager = LinearLayoutManager(this@ChatActivity).apply {
                stackFromEnd = true // –ù–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –≤–Ω–∏–∑—É
            }
        }
    }

    private fun setupSendButton() {
        binding.buttonSendMessage.setOnClickListener {
            val messageText = binding.editTextMessageInput.text.toString().trim()
            if (messageText.isNotEmpty()) {
                sendMessage(messageText)
                binding.editTextMessageInput.text.clear()
            }
        }
    }

    private fun sendMessage(text: String) {
        val newMessage = Message(
            id = UUID.randomUUID().toString(),
            text = text,
            senderId = currentUserId,
            timestamp = Date().time
        )
        chatAdapter.addMessage(newMessage)
        binding.recyclerViewMessages.scrollToPosition(chatAdapter.itemCount - 1)

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        val connectedPeers = webRTCManager.getConnectedPeers()

        // –†–∞—Å—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É
        connectedPeers.forEach { peerId ->
            Timber.tag(TAG).d("Sending message to $peerId via WebRTC: $text")
            webRTCManager.sendMessage(peerId, text)
        }

        // –ú–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    }

    private fun loadInitialMessages() {
        // !!! –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î –∏–ª–∏ –∫—ç—à–∞ !!!
        Timber.tag(TAG).w("Loading sample messages only!")
        val sampleMessages = listOf(
            Message(UUID.randomUUID().toString(), "–ü—Ä–∏–≤–µ—Ç!", recipientUserId, Date().time - 50000),
            Message(UUID.randomUUID().toString(), "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —Ç–≤–æ–∏ –¥–µ–ª–∞?", currentUserId, Date().time - 40000),
            Message(UUID.randomUUID().toString(), "–ù–æ—Ä–º, —Ç–≤–æ–∏ –∫–∞–∫?", recipientUserId, Date().time - 30000)
        )
        chatAdapter.submitList(sampleMessages.toMutableList())
    }

    // --- –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –º–µ—Ç–æ–¥–æ–≤ WebRTCListener ---

    override fun onConnectionStateChanged(target: String, state: PeerConnection.IceConnectionState) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫ —Ç–µ–∫—É—â–µ–º—É —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É
        if (target == recipientUserId) {
            Timber.tag(TAG).i("Connection state for $target changed: $state")
            // –û–±–Ω–æ–≤–ª—è–µ–º UI –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            runOnUiThread {
                // –ü—Ä–∏–º–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∞ –≤ Toolbar
                supportActionBar?.subtitle = when(state) {
                    PeerConnection.IceConnectionState.CHECKING -> "–ü—Ä–æ–≤–µ—Ä–∫–∞..."
                    PeerConnection.IceConnectionState.CONNECTED, PeerConnection.IceConnectionState.COMPLETED -> "–°–æ–µ–¥–∏–Ω–µ–Ω–æ"
                    PeerConnection.IceConnectionState.DISCONNECTED -> "–û—Ç–∫–ª—é—á–µ–Ω–æ"
                    PeerConnection.IceConnectionState.FAILED -> "–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"
                    PeerConnection.IceConnectionState.CLOSED -> "–ó–∞–∫—Ä—ã—Ç–æ"
                    PeerConnection.IceConnectionState.NEW -> "–ù–æ–≤–æ–µ"
                    else -> "–°—Ç–∞—Ç—É—Å –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
                }
            }
        } else {
            Timber.tag(TAG).d("Ignoring connection state change for different target: $target")
        }
    }

    override fun onMessageReceived(sender: String, message: String) {
        Timber.tag(TAG)
            .i("Message received from $sender: $message (Callback Thread: ${Thread.currentThread().name})")

        runOnUiThread {
            Timber.tag(TAG).d("Displaying message from $sender on Main Thread")
            val receivedMessage = Message(
                id = UUID.randomUUID().toString(),
                text = message,
                senderId = sender,
                timestamp = Date().time
            )

            // –ï—Å–ª–∏ —ç—Ç–æ –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º
            if (sender == recipientUserId) {
                chatAdapter.addMessage(receivedMessage)
                binding.recyclerViewMessages.scrollToPosition(chatAdapter.itemCount - 1)
            } else {
                // üëá –¢—ã –º–æ–∂–µ—à—å: –ª–∏–±–æ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –µ–≥–æ –≤ –¥—Ä—É–≥–æ–º —Ñ—Ä–∞–≥–º–µ–Ω—Ç–µ/—á–∞—Ç–µ, –ª–∏–±–æ –ø–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                Timber.tag(TAG).w("Message received from other peer ($sender), not active chat ($recipientUserId)")
                // chatCache.saveMessageForLater(sender, receivedMessage)
            }
        }
    }


    override fun onError(target: String?, error: String) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ –∫ —Ç–µ–∫—É—â–µ–º—É —á–∞—Ç—É –∏–ª–∏ –æ–Ω–∞ –æ–±—â–∞—è
        if (target == null || target == recipientUserId) {
            Timber.tag(TAG).e("WebRTC Error (target: $target): $error")
            // –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ Snackbar –∏–ª–∏ Toast)
            runOnUiThread {
                // –ü—Ä–∏–º–µ—Ä:
                com.google.android.material.snackbar.Snackbar.make(binding.root, "–û—à–∏–±–∫–∞ WebRTC: $error", com.google.android.material.snackbar.Snackbar.LENGTH_LONG).show()
                // –ú–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤ Toolbar
                supportActionBar?.subtitle = "–û—à–∏–±–∫–∞"
            }
        } else {
            Timber.tag(TAG).e("Ignoring error for different target: $target, Error: $error")
        }
    }

    override fun onDataChannelOpen(target: String) {
        Timber.d("something really hoes wrong")
    }

    override fun onDataChannelStateChanged(
        target: String,
        newState: DataChannel.State
    ) {
        TODO("Not yet implemented")
    }
}